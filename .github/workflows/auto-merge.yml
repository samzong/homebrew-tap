name: Auto Merge PR

on:
  workflow_run:
    workflows: ["PR Review"]
    types:
      - completed

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Auto Merge PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the related PR that triggered this workflow run
            const workflowRun = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            
            // The PR Review workflow is triggered by a PR event, and from there, the PR number is found.
            const prNumber = workflowRun.data.pull_requests[0]?.number;
            
            if (!prNumber) {
              console.log('No PR associated with this workflow run.');
              return;
            }
            
            console.log(`Found PR #${prNumber}`);
            
            // Get PR details
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Check if PR is mergeable
            // mergeable can be null if GitHub hasn't computed mergeability yet
            const checkMergeabilityWithBackoff = async (retries, delay, maxDelay) => {
              for (let i = 0; i < retries; i++) {
                if (pr.data.mergeable !== null) {
                  return pr.data.mergeable;
                }
                console.log(`PR #${prNumber} mergeability is still being computed. Waiting for ${delay}ms...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                delay = Math.min(delay * 2, maxDelay); // Exponential backoff with upper limit
                const updatedPr = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                pr.data.mergeable = updatedPr.data.mergeable;
              }
              return pr.data.mergeable;
            };
            
            const mergeable = await checkMergeabilityWithBackoff(5, 5000);
            
            if (mergeable === null || !mergeable) {
              console.log(`PR #${prNumber} is not mergeable after rechecking.`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: '‚ö†Ô∏è Automatic merge failed: This PR cannot be merged at the moment. Please resolve the conflicts and try again.'
              });
              return;
            }
            
            // Check if all checks have passed
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.data.head.sha
            });
            
            // Handle empty checks case - ensure we actually have some checks to verify
            if (checks.data.check_runs.length === 0) {
              console.log(`PR #${prNumber} has no checks. Cannot verify status.`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: '‚ö†Ô∏è Automatic merge failed: No checks found for this PR. At least one check must run and pass before auto-merging.'
              });
              return;
            }
            
            const allChecksPass = checks.data.check_runs.every(check => 
              check.conclusion === 'success' || check.conclusion === 'skipped'
            );
            
            if (!allChecksPass) {
              console.log(`PR #${prNumber} has failed checks.`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: '‚ö†Ô∏è Automatic merge failed: Some checks have failed. Please fix the failed checks.'
              });
              return;
            }
            
            // Perform the merge operation
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'merge'
              });
              
              console.log(`Successfully merged PR #${prNumber}`);
              
              // Add a comment indicating successful merge
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: 'üéâ Automatic merge successful: This PR has been automatically merged into the target branch.'
              });
            } catch (error) {
              console.error(`Error merging PR #${prNumber}:`, error);
              
              // Add a comment indicating failed merge
              // Ensure error.message is defined or use a fallback message
              const errorMessage = error.message || 'Automatic merge failed, no specific error information provided';
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `‚ùå Automatic merge failed: ${errorMessage}`
              });
            } 